name: Build osu! GU

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        default: '1.0.0-dev'
  release:
    types: [ published ]
  workflow_run:
    workflows: [ "Auto tag from master" ]
    types: [ completed ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  version:
    name: Compute version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      semver: ${{ steps.version.outputs.semver }}
      assemblyVersion: ${{ steps.version.outputs.assemblyVersion }}
      fileVersion: ${{ steps.version.outputs.fileVersion }}
    steps:
    - name: Checkout (for commit count)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Determine version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          git fetch --tags --force
          LAST_TAG=$(git tag -l 'v*' --sort=-creatordate | head -n1)
          if [[ -n "$LAST_TAG" ]]; then
            VERSION="$LAST_TAG"
            SEMVER=${VERSION#v}
            NUMERIC=${SEMVER%%-*}
            PARTS=$(echo "$NUMERIC" | awk -F. '{print NF}')
            if [[ $PARTS -eq 1 ]]; then NUMERIC="$NUMERIC.0.0.0"; fi
            if [[ $PARTS -eq 2 ]]; then NUMERIC="$NUMERIC.0.0"; fi
            if [[ $PARTS -eq 3 ]]; then NUMERIC="$NUMERIC.0"; fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "semver=$SEMVER" >> $GITHUB_OUTPUT
            echo "assemblyVersion=$NUMERIC" >> $GITHUB_OUTPUT
            echo "fileVersion=$NUMERIC" >> $GITHUB_OUTPUT
            echo "Computed version from latest tag (workflow_run): $VERSION"
            exit 0
          fi
        fi
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_NUMBER=$((COMMIT_COUNT % 10000))
          VERSION="1.0.$BUILD_NUMBER"
        else
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_NUMBER=$((COMMIT_COUNT % 10000))
          VERSION="0.9.$BUILD_NUMBER"
        fi

        SEMVER=${VERSION#v}
        NUMERIC=${SEMVER%%-*}
        PARTS=$(echo "$NUMERIC" | awk -F. '{print NF}')
        if [[ $PARTS -eq 1 ]]; then NUMERIC="$NUMERIC.0.0.0"; fi
        if [[ $PARTS -eq 2 ]]; then NUMERIC="$NUMERIC.0.0"; fi
        if [[ $PARTS -eq 3 ]]; then NUMERIC="$NUMERIC.0"; fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "semver=$SEMVER" >> $GITHUB_OUTPUT
        echo "assemblyVersion=$NUMERIC" >> $GITHUB_OUTPUT
        echo "fileVersion=$NUMERIC" >> $GITHUB_OUTPUT
        echo "Computed version: $VERSION (semver: $SEMVER, assembly/file: $NUMERIC)"

  build:
    name: Build ${{ matrix.os }}
    if: github.event_name != 'push' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_run'
    needs: version
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    # Prevent concurrent builds from interfering with each other's NuGet operations
    concurrency:
      group: build-${{ matrix.os }}-${{ matrix.runtime }}
      cancel-in-progress: false
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: osu-gu-windows
            executable: osu-gu!.exe
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: osu-gu-linux
            executable: osu-gu!
          - os: macos-latest
            runtime: osx-x64
            artifact-name: osu-gu-macos-intel
            executable: osu-gu!
          - os: macos-latest
            runtime: osx-arm64
            artifact-name: osu-gu-macos-apple-silicon
            executable: osu-gu!
          - os: ubuntu-latest
            runtime: android
            artifact-name: osu-gu-android
            executable: osu.Android-Signed.apk

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Ensure we have complete git history for version calculation
        # Use the release tag when triggered by a Release event, otherwise the triggering SHA
        ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.sha }}

    - name: Switch to latest tag (workflow_run)
      if: github.event_name == 'workflow_run'
      shell: bash
      run: |
        git fetch --tags --force
        LAST_TAG=$(git tag -l 'v*' --sort=-creatordate | head -n1)
        echo "Latest tag detected: $LAST_TAG"
        git checkout "$LAST_TAG"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Java for Android (Android only)
      if: matrix.runtime == 'android'
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '17'

    - name: Setup Android SDK (Android only)
      if: matrix.runtime == 'android'
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546

    - name: Accept Android SDK licenses (Android only)
      if: matrix.runtime == 'android'
      shell: bash
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Install Android workload (Android only)
      if: matrix.runtime == 'android'
      shell: bash
      run: |
        dotnet workload install android
        dotnet workload list
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Java Home: $JAVA_HOME"

    - name: Install Velopack CLI
      shell: bash
      run: dotnet tool install -g vpk

    - name: Create macOS icon (macOS only)
      if: matrix.os == 'macos-latest'
      continue-on-error: true
      shell: bash
      run: |
        # Convert .ico to .icns on macOS
        if [ -f "osu.Desktop/lazer.ico" ]; then
          echo "Converting lazer.ico to lazer.icns for macOS..."
          # First convert ico to png to avoid format issues
          sips -s format png osu.Desktop/lazer.ico --out temp_icon.png || {
            echo "Warning: Failed to convert ico to png, trying alternative method..."
            # Fallback: just copy the ico file and rename it
            cp osu.Desktop/lazer.ico osu.Desktop/lazer.icns
            echo "Using .ico file as fallback for macOS icon"
            exit 0
          }

          # Create iconset directory
          mkdir -p lazer.iconset

          # Generate different sizes from the converted PNG
          sips -z 16 16     temp_icon.png --out lazer.iconset/icon_16x16.png
          sips -z 32 32     temp_icon.png --out lazer.iconset/icon_16x16@2x.png
          sips -z 32 32     temp_icon.png --out lazer.iconset/icon_32x32.png
          sips -z 64 64     temp_icon.png --out lazer.iconset/icon_32x32@2x.png
          sips -z 128 128   temp_icon.png --out lazer.iconset/icon_128x128.png
          sips -z 256 256   temp_icon.png --out lazer.iconset/icon_128x128@2x.png
          sips -z 256 256   temp_icon.png --out lazer.iconset/icon_256x256.png
          sips -z 512 512   temp_icon.png --out lazer.iconset/icon_256x256@2x.png
          sips -z 512 512   temp_icon.png --out lazer.iconset/icon_512x512.png
          cp lazer.iconset/icon_512x512.png lazer.iconset/icon_512x512@2x.png

          # Create the icns file
          iconutil -c icns lazer.iconset || {
            echo "Warning: iconutil failed, using fallback method..."
            cp osu.Desktop/lazer.ico osu.Desktop/lazer.icns
            rm -f temp_icon.png
            rm -rf lazer.iconset
            exit 0
          }

          # Copy the result and cleanup
          cp lazer.icns osu.Desktop/lazer.icns
          rm -f temp_icon.png
          rm -rf lazer.iconset
          echo "Successfully created lazer.icns"
        else
          echo "Warning: lazer.ico not found, creating placeholder icns"
          # Create a simple placeholder if the ico file doesn't exist
          touch osu.Desktop/lazer.icns
        fi

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.local/share/NuGet/v3-cache
          ~/.cache/NuGet/v3-cache
        key: ${{ runner.os }}-${{ matrix.runtime }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json', 'nuget.config') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.runtime }}-nuget-${{ hashFiles('**/*.csproj') }}
          ${{ runner.os }}-${{ matrix.runtime }}-nuget-
          ${{ runner.os }}-nuget-

    - name: Show version
      shell: bash
      run: |
        echo "Building version: ${{ needs.version.outputs.version }} (semver: ${{ needs.version.outputs.semver }}, assembly/file: ${{ needs.version.outputs.fileVersion }})"

    - name: Clean previous build artifacts
      shell: bash
      run: |
        echo "Cleaning previous build artifacts for ${{ matrix.runtime }}"
        if [[ "${{ matrix.runtime }}" == "android" ]]; then
          rm -rf osu.Android/bin osu.Android/obj
        else
          rm -rf osu.Desktop/bin osu.Desktop/obj
        fi
        rm -rf publish/${{ matrix.runtime }}

    - name: Restore dependencies for specific runtime
      timeout-minutes: 15
      shell: bash
      run: |
        echo "Restoring packages for runtime: ${{ matrix.runtime }}"
        if [[ "${{ matrix.runtime }}" == "android" ]]; then
          dotnet restore osu.Android/osu.Android.csproj \
            --verbosity normal \
            --configfile nuget.config \
            --no-cache \
            --force
        else
          dotnet restore osu.Desktop/osu.Desktop.csproj \
            --runtime ${{ matrix.runtime }} \
            --verbosity normal \
            --configfile nuget.config \
            --no-cache \
            --force
        fi

    - name: Setup Android signing (Android only)
      if: matrix.runtime == 'android'
      shell: bash
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        echo "Setting up Android keystore for signing..."
        # 从 Secrets 中获取 base64 编码的 keystore
        if [[ -n "$ANDROID_KEYSTORE_BASE64" ]]; then
          echo "Using keystore from GitHub Secrets"
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > osu.keystore
        else
          echo "No keystore found in secrets, creating temporary one..."
          keytool -genkey -v \
            -keystore osu.keystore \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias osu \
            -storepass temp123 \
            -keypass temp123 \
            -dname "CN=osu-gu-temp,OU=osu-gu,O=osu-gu,L=Unknown,S=Unknown,C=Unknown"
          echo "WARNING: Using temporary keystore! Please configure ANDROID_KEYSTORE_BASE64 secret for production builds."
        fi

    - name: Build and publish
      shell: bash
      env:
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        echo "Building for runtime: ${{ matrix.runtime }}"
        if [[ "${{ matrix.runtime }}" == "android" ]]; then
          # Build Android APK
          # 设置签名参数，优先使用 Secrets 中的值，否则使用默认值
          KEYSTORE_PASS="${ANDROID_KEYSTORE_PASSWORD:-temp123}"
          KEY_ALIAS="${ANDROID_KEY_ALIAS:-osu}"
          KEY_PASS="${ANDROID_KEY_PASSWORD:-temp123}"
          
          echo "Using Java version: $(java -version 2>&1 | head -n 1)"
          echo "Android SDK Root: $ANDROID_SDK_ROOT"
          
          dotnet publish osu.Android/osu.Android.csproj \
            --configuration Release \
            --verbosity normal \
            --no-restore \
            -p:Version=${{ needs.version.outputs.semver }} \
            -p:ApplicationVersion=${{ needs.version.outputs.fileVersion }} \
            -p:ApplicationDisplayVersion=${{ needs.version.outputs.semver }} \
            -p:AndroidSdkDirectory=$ANDROID_SDK_ROOT \
            -p:AndroidKeyStore=true \
            -p:AndroidSigningKeyStore=../osu.keystore \
            -p:AndroidSigningKeyAlias="$KEY_ALIAS" \
            -p:AndroidSigningKeyPass="$KEY_PASS" \
            -p:AndroidSigningStorePass="$KEYSTORE_PASS"
          
          # Create output directory and copy APK
          mkdir -p "publish/${{ matrix.runtime }}"
          find osu.Android/bin/Release/ -name "*.apk" -exec cp {} "publish/${{ matrix.runtime }}/${{ matrix.executable }}" \;
        else
          # Desktop build
          dotnet publish osu.Desktop/osu.Desktop.csproj \
            --self-contained \
            --runtime ${{ matrix.runtime }} \
            --configuration Release \
            --output "publish/${{ matrix.runtime }}" \
            --no-restore \
            --verbosity normal \
            -p:PublishSingleFile=false \
            -p:PublishTrimmed=false \
            -p:Version=${{ needs.version.outputs.semver }} \
            -p:FileVersion=${{ needs.version.outputs.fileVersion }} \
            -p:AssemblyVersion=${{ needs.version.outputs.assemblyVersion }} \
            -p:InformationalVersion=${{ needs.version.outputs.version }}
        fi

    - name: Set executable permissions (Linux/macOS)
      if: (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest') && matrix.runtime != 'android'
      shell: bash
      run: chmod +x "publish/${{ matrix.runtime }}/${{ matrix.executable }}"

    - name: Create Velopack package
      if: matrix.runtime != 'android'
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Use icns if available, fallback to ico
          ICON_FILE="osu.Desktop/lazer.ico"
          if [ -f "osu.Desktop/lazer.icns" ] && [ -s "osu.Desktop/lazer.icns" ]; then
            ICON_FILE="osu.Desktop/lazer.icns"
            echo "Using lazer.icns for macOS packaging"
          else
            echo "Using lazer.ico as fallback for macOS packaging"
          fi

          CHANNEL="osx-x64"
          if [[ "${{ matrix.runtime }}" == "osx-arm64" ]]; then CHANNEL="osx-arm64"; fi

          vpk pack \
            -u "osu-lazer-gu" \
            -v "${{ needs.version.outputs.semver }}" \
            -p "publish/${{ matrix.runtime }}" \
            -e "${{ matrix.executable }}" \
            --packAuthors "osu! GooGuTeam" \
            --packTitle "osu! GU" \
            -i "$ICON_FILE" \
            -c "$CHANNEL"
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          vpk pack \
            -u "osu-lazer-gu" \
            -v "${{ needs.version.outputs.semver }}" \
            -p "publish/${{ matrix.runtime }}" \
            -e "${{ matrix.executable }}" \
            --packAuthors "osu! GooGuTeam" \
            --packTitle "osu! GU" \
            -i "osu.Desktop/lazer.ico" \
            -c "win"
        else
          # Linux
          vpk pack \
            -u "osu-lazer-gu" \
            -v "${{ needs.version.outputs.semver }}" \
            -p "publish/${{ matrix.runtime }}" \
            -e "${{ matrix.executable }}" \
            --packAuthors "osu! GooGuTeam" \
            --packTitle "osu! GU" \
            -i "osu.Desktop/lazer.ico" \
            -c "linux"
        fi

    - name: Normalize asset names (optional)
      shell: bash
      run: |
        shopt -s nullglob
        # Windows installer rename to install.exe if present
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [ -f "Releases/Setup.exe" ]; then
            mv -f Releases/Setup.exe Releases/install.exe
          fi
        fi
        # macOS zip rename if present
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          if [[ "${{ matrix.runtime }}" == "osx-x64" ]]; then
            for f in Releases/*osx-x64*.zip; do mv -f "$f" Releases/osu.app.Intel.zip; done
            # Ensure nupkg channel naming uses osx-x64-full.nupkg
            for f in Releases/*.nupkg; do
              if [[ "$f" == *osx*full.nupkg ]] && [[ "$f" != *arm64* ]]; then
                base=$(basename "$f")
                mv -f "$f" "Releases/${base/osx-full.nupkg/osx-x64-full.nupkg}"
              fi
            done
          else
            for f in Releases/*osx-arm64*.zip; do mv -f "$f" Releases/osu.app.Apple.Silicon.zip; done
            # Ensure nupkg channel naming uses osx-arm64-full.nupkg
            for f in Releases/*.nupkg; do
              if [[ "$f" == *osx*full.nupkg ]]; then
                base=$(basename "$f")
                # If upstream already names arm64 correctly, skip; otherwise replace generic osx-full
                if [[ "$base" != *osx-arm64-full.nupkg ]]; then
                  mv -f "$f" "Releases/${base/osx-full.nupkg/osx-arm64-full.nupkg}"
                fi
              fi
            done
          fi
        fi
        # Linux AppImage rename if present
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]] && [[ "${{ matrix.runtime }}" == "linux-x64" ]]; then
          for f in Releases/*.AppImage; do mv -f "$f" Releases/osu.AppImage; done
        fi
        # Android APK rename
        if [[ "${{ matrix.runtime }}" == "android" ]]; then
          mkdir -p Releases
          if [ -f "publish/${{ matrix.runtime }}/${{ matrix.executable }}" ]; then
            cp "publish/${{ matrix.runtime }}/${{ matrix.executable }}" "Releases/osu-gu.apk"
          fi
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}-${{ needs.version.outputs.version }}
        path: |
          publish/${{ matrix.runtime }}/
          Releases/
        retention-days: 30

    - name: Upload installer (Release only)
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: installer-${{ matrix.artifact-name }}
        path: Releases/
        retention-days: 90

  verify-build:
    name: CI Build (no release)
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.local/share/NuGet/v3-cache
          ~/.cache/NuGet/v3-cache
        key: ${{ runner.os }}-ci-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json', 'nuget.config') }}
        restore-keys: |
          ${{ runner.os }}-ci-nuget-${{ hashFiles('**/*.csproj') }}
          ${{ runner.os }}-ci-nuget-
          ${{ runner.os }}-nuget-
    - name: Restore
      shell: bash
      run: |
        dotnet restore osu.Desktop/osu.Desktop.csproj --configfile nuget.config --verbosity minimal
    - name: Build
      shell: bash
      run: |
        dotnet build osu.Desktop/osu.Desktop.csproj --configuration Release --no-restore --verbosity minimal

  release:
    # Create a GitHub Release when triggered by:
    # - tag push (v*)
    # - release event
    # - push to master/main (auto-generate date-based tag)
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: [build, version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*'
        merge-multiple: true
        path: artifacts


    - name: Collect release files
      shell: bash
      run: |
        mkdir -p release-files
        shopt -s globstar nullglob
        # copy all files from any Releases/ folder in artifacts
        for f in artifacts/**/Releases/*; do
          cp -f "$f" release-files/
        done
        echo "Collected files:" && ls -al release-files || true

    # Use the precomputed version as the tag

    - name: Create or update GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.version }}
        target_commitish: ${{ github.sha }}
        name: osu! GU ${{ needs.version.outputs.version }}
        files: release-files/**
        draft: false
        prerelease: ${{ contains(needs.version.outputs.version, 'alpha') || contains(needs.version.outputs.version, 'beta') || contains(needs.version.outputs.version, 'rc') }}
        generate_release_notes: true
        body: |
          ## osu! GU ${{ needs.version.outputs.version }}

          基于官方 osu!(lazer) 的自定义版本。

          ### 下载

          - **Windows**: 下载 `osu-gu-windows` 安装程序
          - **Linux**: 下载 `osu-gu-linux` 安装包
          - **macOS (Intel)**: 下载 `osu-gu-macos-intel` 安装包
          - **macOS (Apple Silicon)**: 下载 `osu-gu-macos-apple-silicon` 安装包
          - **Android**: 下载 `osu-gu-android` APK 文件

          ### 安装说明

          **桌面版 (Windows/Linux/macOS)**:
          1. 下载对应平台的安装程序
          2. 运行安装程序并按提示安装
          3. 该版本使用独立数据目录 (`osu-gu`)，不会与官方版本冲突
          4. 保持使用官方 `osu://` 协议

          **Android 版**:
          1. 下载 `osu-gu.apk` 文件
          2. 在设备上启用"未知来源"安装权限
          3. 打开 APK 文件进行安装
          4. 首次启动可能需要授予存储权限

          ### 平台特殊说明

          **macOS 用户**:
          - Intel Mac 请下载 `osu-gu-macos-intel`
          - Apple Silicon Mac (M1/M2/M3) 请下载 `osu-gu-macos-apple-silicon`
          - 首次运行可能需要在系统偏好设置中允许来自未知开发者的应用

          **Android 用户**:
          - 需要 Android 5.0 (API 21) 或更高版本
          - 建议至少 2GB RAM 和 4GB 可用存储空间
          - 支持 ARM 和 x86 架构

          ### 注意事项

          - 桌面版需要 .NET 8.0 运行时（安装程序会自动检查）
          - 首次运行可能需要较长时间进行初始化

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    if: always()
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
    - name: Notify build result
      run: |
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ 构建成功"
        else
          echo "❌ 构建失败"
          exit 1
        fi
