name: Build osu! GU

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        default: '1.0.0-dev'
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    # Prevent concurrent builds from interfering with each other's NuGet operations
    concurrency:
      group: build-${{ matrix.os }}-${{ matrix.runtime }}
      cancel-in-progress: false
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: osu-gu-windows
            executable: osu-gu!.exe
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: osu-gu-linux
            executable: osu-gu!
          - os: macos-latest
            runtime: osx-x64
            artifact-name: osu-gu-macos-intel
            executable: osu-gu!
          - os: macos-latest
            runtime: osx-arm64
            artifact-name: osu-gu-macos-apple-silicon
            executable: osu-gu!

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Ensure we have complete git history for version calculation
        # Use the release tag when triggered by a Release event, otherwise the triggering SHA
        ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.sha }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install Velopack CLI
      shell: bash
      run: dotnet tool install -g vpk

    - name: Create macOS icon (macOS only)
      if: matrix.os == 'macos-latest'
      continue-on-error: true
      shell: bash
      run: |
        # Convert .ico to .icns on macOS
        if [ -f "osu.Desktop/lazer.ico" ]; then
          echo "Converting lazer.ico to lazer.icns for macOS..."
          # First convert ico to png to avoid format issues
          sips -s format png osu.Desktop/lazer.ico --out temp_icon.png || {
            echo "Warning: Failed to convert ico to png, trying alternative method..."
            # Fallback: just copy the ico file and rename it
            cp osu.Desktop/lazer.ico osu.Desktop/lazer.icns
            echo "Using .ico file as fallback for macOS icon"
            exit 0
          }

          # Create iconset directory
          mkdir -p lazer.iconset

          # Generate different sizes from the converted PNG
          sips -z 16 16     temp_icon.png --out lazer.iconset/icon_16x16.png
          sips -z 32 32     temp_icon.png --out lazer.iconset/icon_16x16@2x.png
          sips -z 32 32     temp_icon.png --out lazer.iconset/icon_32x32.png
          sips -z 64 64     temp_icon.png --out lazer.iconset/icon_32x32@2x.png
          sips -z 128 128   temp_icon.png --out lazer.iconset/icon_128x128.png
          sips -z 256 256   temp_icon.png --out lazer.iconset/icon_128x128@2x.png
          sips -z 256 256   temp_icon.png --out lazer.iconset/icon_256x256.png
          sips -z 512 512   temp_icon.png --out lazer.iconset/icon_256x256@2x.png
          sips -z 512 512   temp_icon.png --out lazer.iconset/icon_512x512.png
          cp lazer.iconset/icon_512x512.png lazer.iconset/icon_512x512@2x.png

          # Create the icns file
          iconutil -c icns lazer.iconset || {
            echo "Warning: iconutil failed, using fallback method..."
            cp osu.Desktop/lazer.ico osu.Desktop/lazer.icns
            rm -f temp_icon.png
            rm -rf lazer.iconset
            exit 0
          }

          # Copy the result and cleanup
          cp lazer.icns osu.Desktop/lazer.icns
          rm -f temp_icon.png
          rm -rf lazer.iconset
          echo "Successfully created lazer.icns"
        else
          echo "Warning: lazer.ico not found, creating placeholder icns"
          # Create a simple placeholder if the ico file doesn't exist
          touch osu.Desktop/lazer.icns
        fi

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.local/share/NuGet/v3-cache
          ~/.cache/NuGet/v3-cache
        key: ${{ runner.os }}-${{ matrix.runtime }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json', 'nuget.config') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.runtime }}-nuget-${{ hashFiles('**/*.csproj') }}
          ${{ runner.os }}-${{ matrix.runtime }}-nuget-
          ${{ runner.os }}-nuget-

    - name: Determine version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          # Use 3-part SemVer for main/master: 1.0.BUILDNUMBER
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_NUMBER=$((COMMIT_COUNT % 10000))
          VERSION="1.0.$BUILD_NUMBER"
        else
          # Dev builds use 3-part SemVer: 0.9.BUILDNUMBER
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_NUMBER=$((COMMIT_COUNT % 10000))
          VERSION="0.9.$BUILD_NUMBER"
        fi

        # Strip leading 'v' to form semver for packaging / display
        SEMVER=${VERSION#v}
        # Numeric only for assembly/file version (drop any pre-release/build metadata)
        NUMERIC=${SEMVER%%-*}
        # Ensure four-part version for FileVersion/AssemblyVersion
        PARTS=$(echo "$NUMERIC" | awk -F. '{print NF}')
        if [[ $PARTS -eq 1 ]]; then NUMERIC="$NUMERIC.0.0.0"; fi
        if [[ $PARTS -eq 2 ]]; then NUMERIC="$NUMERIC.0.0"; fi
        if [[ $PARTS -eq 3 ]]; then NUMERIC="$NUMERIC.0"; fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "semver=$SEMVER" >> $GITHUB_OUTPUT
        echo "assemblyVersion=$NUMERIC" >> $GITHUB_OUTPUT
        echo "fileVersion=$NUMERIC" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION (semver: $SEMVER, assembly/file: $NUMERIC)"

    - name: Clean previous build artifacts
      shell: bash
      run: |
        echo "Cleaning previous build artifacts for ${{ matrix.runtime }}"
        rm -rf osu.Desktop/bin osu.Desktop/obj
        rm -rf publish/${{ matrix.runtime }}

    - name: Restore dependencies for specific runtime
      timeout-minutes: 15
      shell: bash
      run: |
        echo "Restoring packages for runtime: ${{ matrix.runtime }}"
        dotnet restore osu.Desktop/osu.Desktop.csproj \
          --runtime ${{ matrix.runtime }} \
          --verbosity normal \
          --configfile nuget.config \
          --no-cache \
          --force

    - name: Build and publish
      shell: bash
      run: |
        echo "Publishing for runtime: ${{ matrix.runtime }}"
        dotnet publish osu.Desktop/osu.Desktop.csproj \
          --self-contained \
          --runtime ${{ matrix.runtime }} \
          --configuration Release \
          --output "publish/${{ matrix.runtime }}" \
          --no-restore \
          --verbosity normal \
          -p:PublishSingleFile=false \
          -p:PublishTrimmed=false \
          -p:Version=${{ steps.version.outputs.semver }} \
          -p:FileVersion=${{ steps.version.outputs.fileVersion }} \
          -p:AssemblyVersion=${{ steps.version.outputs.assemblyVersion }} \
          -p:InformationalVersion=${{ steps.version.outputs.version }}

    - name: Set executable permissions (Linux/macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      shell: bash
      run: chmod +x "publish/${{ matrix.runtime }}/${{ matrix.executable }}"

    - name: Create Velopack package
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Use icns if available, fallback to ico
          ICON_FILE="osu.Desktop/lazer.ico"
          if [ -f "osu.Desktop/lazer.icns" ] && [ -s "osu.Desktop/lazer.icns" ]; then
            ICON_FILE="osu.Desktop/lazer.icns"
            echo "Using lazer.icns for macOS packaging"
          else
            echo "Using lazer.ico as fallback for macOS packaging"
          fi

          vpk pack \
            -u "osu-lazer-gu" \
            -v "${{ steps.version.outputs.semver }}" \
            -p "publish/${{ matrix.runtime }}" \
            -e "${{ matrix.executable }}" \
            --packAuthors "osu! GooGuTeam" \
            --packTitle "osu! GU" \
            -i "$ICON_FILE" \
            -c "osx"
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          vpk pack \
            -u "osu-lazer-gu" \
            -v "${{ steps.version.outputs.semver }}" \
            -p "publish/${{ matrix.runtime }}" \
            -e "${{ matrix.executable }}" \
            --packAuthors "osu! GooGuTeam" \
            --packTitle "osu! GU" \
            -i "osu.Desktop/lazer.ico" \
            -c "win"
        else
          # Linux
          vpk pack \
            -u "osu-lazer-gu" \
            -v "${{ steps.version.outputs.semver }}" \
            -p "publish/${{ matrix.runtime }}" \
            -e "${{ matrix.executable }}" \
            --packAuthors "osu! GooGuTeam" \
            --packTitle "osu! GU" \
            -i "osu.Desktop/lazer.ico" \
            -c "linux"
        fi

    - name: Normalize asset names (optional)
      shell: bash
      run: |
        shopt -s nullglob
        # Windows installer rename to install.exe if present
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [ -f "Releases/Setup.exe" ]; then
            mv -f Releases/Setup.exe Releases/install.exe
          fi
        fi
        # macOS zip rename if present
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          if [[ "${{ matrix.runtime }}" == "osx-x64" ]]; then
            for f in Releases/*osx-x64*.zip; do mv -f "$f" Releases/osu.app.Intel.zip; done
          else
            for f in Releases/*osx-arm64*.zip; do mv -f "$f" Releases/osu.app.Apple.Silicon.zip; done
          fi
        fi
        # Linux AppImage rename if present
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          for f in Releases/*.AppImage; do mv -f "$f" Releases/osu.AppImage; done
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}-${{ steps.version.outputs.version }}
        path: |
          publish/${{ matrix.runtime }}/
          Releases/
        retention-days: 30

    - name: Upload installer (Release only)
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: installer-${{ matrix.artifact-name }}
        path: Releases/
        retention-days: 90

  release:
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: installer-*
        merge-multiple: true
        path: release-files

    - name: Create or update GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        draft: false
        prerelease: ${{ contains((github.ref_name || github.event.release.tag_name), 'alpha') || contains((github.ref_name || github.event.release.tag_name), 'beta') || contains((github.ref_name || github.event.release.tag_name), 'rc') }}
        generate_release_notes: true
        body: |
          ## osu! GU ${{ github.ref_name || github.event.release.tag_name }}

          基于官方 osu!(lazer) 的自定义版本。

          ### 下载

          - **Windows**: 下载 `osu-gu-windows` 安装程序
          - **Linux**: 下载 `osu-gu-linux` 安装包
          - **macOS (Intel)**: 下载 `osu-gu-macos-intel` 安装包
          - **macOS (Apple Silicon)**: 下载 `osu-gu-macos-apple-silicon` 安装包

          ### 安装说明

          1. 下载对应平台的安装程序
          2. 运行安装程序并按提示安装
          3. 该版本使用独立数据目录 (`osu-gu`)，不会与官方版本冲突
          4. 保持使用官方 `osu://` 协议

          ### 平台特殊说明

          **macOS 用户**:
          - Intel Mac 请下载 `osu-gu-macos-intel`
          - Apple Silicon Mac (M1/M2/M3) 请下载 `osu-gu-macos-apple-silicon`
          - 首次运行可能需要在系统偏好设置中允许来自未知开发者的应用

          ### 注意事项

          - 需要 .NET 8.0 运行时（安装程序会自动检查）
          - 首次运行可能需要较长时间进行初始化

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    if: always()
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
    - name: Notify build result
      run: |
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ 构建成功"
        else
          echo "❌ 构建失败"
          exit 1
        fi
